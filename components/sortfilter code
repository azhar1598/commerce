// import React, { useEffect, useState } from 'react'
// import { connect } from 'react-redux'
// import {  Button, Radio, Space, Tabs } from 'antd';
// import { Slider, InputNumber, Row, Col } from 'antd';
// import { useMediaQuery } from 'react-responsive';
// import { BsFilterLeft } from 'react-icons/bs'
// import { AiOutlineClose } from 'react-icons/ai';
// import Modal from 'react-modal'
// import { getFilterGroups } from '../actions';




// export const SortFilterModal = ({ getFilterGroups,storeId}) => {


//   const [visible, setVisible] = useState(false);  
//   const isDesktopOrLaptop = useMediaQuery({ minWidth: 992 })
//   const isTabletOrMobile = useMediaQuery({ query: ' (max-width: 992px)' })

//   const[filter,setFilter]=useState('')
//   const [confirmLoading, setConfirmLoading] = useState(false);
//   const [modalText, setModalText] = useState('Content of the modal');
//     const [value, setValue] = useState(1);

//     const [inputValue, setInputValue] = useState(1);
//     const TabPane = Tabs.TabPane;


//   const onChange = (e) => {
//     console.log('radio checked', e.target.value);
//     setValue(e.target.value);
//   }

//   const priceChange = ( newValue) => {
//     setInputValue(newValue);
//   };

//   const showModal = () => {
//     // setVisible(true);
//     setFilterModalVisible(true)
//   }
  

//   const handleOk = () => {
//     setModalText('The modal will be closed after two seconds');
//     setConfirmLoading(true);
//     setTimeout(() => {
//       setVisible(false);
//       setConfirmLoading(false);
//     }, 2000);
//   };

//   const handleCancel = () => {
//     console.log('Clicked cancel button');
//     setVisible(false);
//   };


//   const customStyles = {
//     overlay: { zIndex: 1000 },
//     content: {
//       width: '1000px',
//       top: '50%',
//       left: '50%',
//       right: 'auto',
//       bottom: 'auto',
//       marginRight: '-50%',
//       transform: 'translate(-50%, -50%)',
//       padding: '0',
//       zIndex: 100
//     },
//   };



//   const [filterModalVisible, setFilterModalVisible] = useState(false)
//   const [mobileSortOpen, setMobileSortOpen] = useState(false)
//   const [priceFilter, setPriceFilter] = useState({ priceRange: {} })
//   const [filtersGroup, setFiltersGroup] = useState({})
//   const [filterArray, setFilterArray] = useState([])
//   const [filterPayLoad, setFilterPayLoad] = useState({})
//   const [filterAndSortPayload, setFilterAndSortPayload] = useState({})
//   const [triggerFilter, setTriggerFilter] = useState('No')
//   const [sortOrder, setSortOrder] = useState("false")

//   useEffect(() => {
//       const filterAfterGroupby = filtergroupBy(filterArray)
//       setFilterPayLoad({ filter_groups: filterAfterGroupby })
  
//     }, [filterArray])





  
//     // console.log("filters group", filtersGroup)
  
//     const handleFilter = (groupid, value) => {


//       console.log('filter group',groupid,value)

//       if (filterArray.length) {
//         const indexOfObject = filterArray.findIndex(object => {
//           return object[groupid] == value;
//         });
//         if (indexOfObject != -1) {
//           filterArray.splice(indexOfObject, 1);
//           setFilterArray(filterArray)
//         }
//         else {
//           const newFilterArray = [...filterArray, { [groupid]: value }]
//           setFilterArray(newFilterArray)
//         }
//       }
//       else {
//         const newFilterArray = [...filterArray, { [groupid]: value }]
//         setFilterArray(newFilterArray)
//       }
  
//     }
  
//     const filtergroupBy = (arr, key) => {
//       const result = arr.reduce((h, obj) => Object.assign(h, { [Object.keys(obj)]: (h[Object.keys(obj)] || []).concat(Number(Object.values(obj))) }), {})
//       return result
//     }
  

// // Get Sort and Filters


// useEffect(()=>{
//   const payload={storeId:'az',setFiltersGroup}
//   getFilterGroups({payload})
// },[])



//     useEffect(() => {
//       const filterAfterGroupby = filtergroupBy(filterArray)
//       setFilterPayLoad({ filter_groups: filterAfterGroupby })
  
//     }, [filterArray])
  
//     const priceSliderhandler = (value) => {
//       setPriceFilter({ priceRange: { max_price: value[1], min_price: value[0] } })
//       console.log(value)
//     }
  
//     const handleSortOrder = (e) => {
//       console.log(e.target.value)
//       setSortOrder(e.target.value)
//     }
  
//     const handleFilterAndSort = () => {
      
//       const finalPayloadForSortAndFilter = { ...filterPayLoad, ...priceFilter }
//       setFilterAndSortPayload(finalPayloadForSortAndFilter)
//       setTriggerFilter("yes")
//       setFilterModalVisible(false)
//     }
  
//     useEffect(() => {
//       if (triggerFilter == 'yes') {
//         getShopProducts({ storeId, filterAndSortPayload, sortOrder })
//         setTriggerFilter("No")
//       }
  
//     }, [filterAndSortPayload])

  
  

//   const openMobileSort = () => {
//       setMobileSortOpen(!mobileSortOpen)
//     }


//   return (
//     <div className=''>
//       <Button type="primary" onClick={showModal}>
//         Open Modal with async logic
//       </Button>

//       {
//                   isTabletOrMobile ?
//                    <div className="flex font-bold cursor-pointer" onClick={openMobileSort}>
//                     <BsFilterLeft size={20} className='' />
//                     <p className="flex items-center "> Filter / Sort By</p>
//                   </div>
//                     : 
//                     <div className="flex font-bold cursor-pointer" onClick={showModal}>
//                       <BsFilterLeft size={20} className='' />
//                       <p className="flex items-center "> Filtersss / Sorst By</p>
//                     </div>
//                 }

//           <Modal
//             isOpen={filterModalVisible}
//             // onAfterOpen={afterOpenModal}
//             onRequestClose={() => setFilterModalVisible(false)}
//             style={customStyles}
//           >
//             <div className=''>
//               <div className='flex justify-between pt-4 px-4'>
//                 <h2 className='text-2xl'>Filters</h2>
//                 <p className='cursor-pointer text-xl font-thin' onClick={() => setFilterModalVisible(false)}><AiOutlineClose /></p>
//               </div>
//               <div className="pt-4">
//                 <div className="w-full border-t border-gray-400"></div>
//               </div>
//               <div>
//                 <Tabs tabPosition='left' type="card" size="large" tabBarGutter='0' className='h-[40vh]'>
//                   <div tab={`Sort by`} key="sort" className='h-[40vh] overflow-hidden overflow-y-scroll' >
//                     <div className='mt-2'>
//                       <input checked={sortOrder == "false" ? true : false} onClick={handleSortOrder} id='rel' type="radio" name='sort' value="false" />
//                       <label className='text-[18px] ml-2' htmlFor="rel">Relevance</label>
//                     </div>
//                     <div className='mt-2'>
//                       <input checked={sortOrder == "DESC" ? true : false} onClick={handleSortOrder} id='htl' type="radio" name='sort' value="DESC" />
//                       <label className='text-[18px] ml-2' htmlFor="htl">Price (High to Low)</label>
//                     </div>
//                     <div className='mt-2'>
//                       <input checked={sortOrder == "ASC" ? true : false} onClick={handleSortOrder} id='lth' type="radio" name='sort' value="ASC" />
//                       <label className='text-[18px] ml-2' htmlFor="lth">Price (Low to High)</label>
//                     </div>
//                   </div>
//                   {
//                     Object.keys(filtersGroup).map(function (groupid) {
//                       if (groupid != 'priceRange') {
//                         return (<TabPane tab={`${filtersGroup[groupid].filter_group_name}`} key={groupid} className='h-[40vh] overflow-hidden overflow-y-scroll' >
//                           {
//                             Object.keys(filtersGroup[groupid].filter_group_values).map(function (value) {
//                               return (
//                                 // <input type="radio" id="css" name="fav_language" value="CSS"></input>
//                                 // <p>{filtersGroup[groupid].filter_group_values[value].filter_value_name}</p>
//                                 <div className='mt-2'>
//                                   <input type="checkbox" id={value} value={value} onClick={() => handleFilter(groupid, value)} />
//                                   <label className='text-[18px] ml-2' htmlFor={value}>{filtersGroup[groupid].filter_group_values[value].filter_value_name}</label>
//                                 </div>
//                               )
//                             })
//                           }
//                         </TabPane>)
//                       }
//                       else if (groupid == 'priceRange') {
//                         return (
//                           <TabPane tab={`${groupid}`} key={groupid} className='h-[40vh] overflow-hidden overflow-y-scroll' >
//                             <p className='text-xl text-center mt-14 mb-4'>Select the Price Range</p>
//                             <div className='px-10'>
                            
//                               <Slider trackStyle={{ height: '10px' }} handleStyle={{ height: '20px', width: "20px" }} marks={{
//                                 [Number(filtersGroup[groupid].min_value)]: `${Number(filtersGroup[groupid].min_value)}`,
//                                 [Number(filtersGroup[groupid].max_value)]: `${Number(filtersGroup[groupid].max_value)}`,
//                               }
//                               } onChange={priceSliderhandler} range max={Number(filtersGroup[groupid].max_value)} min={Number(filtersGroup[groupid].min_value)} defaultValue={[Number(filtersGroup[groupid].min_value), Number(filtersGroup[groupid].max_value)]} />
//                             </div>
//                           </TabPane>
//                         )
//                       }
//                     })
//                   }

//                 </Tabs>
//               </div>
//               <div className='flex justify-end gap-6 pb-9 sort-btn'>
//                 <p onClick={() => setFilterModalVisible(false)} className='text-base px-5 py-2 btn-color-revese cursor-pointer'>Cancel</p>
//                 <p onClick={handleFilterAndSort} className='btn-bg text-black text-base mr-10 px-5 py-2 rounded cursor-pointer'>Apply</p>
//               </div>
//             </div>

//           </Modal>
  

     

//     </div>
//   )

//                 }



// const mapStateToProps = state => ({
//   stateStoreDetails: state.storeDetailsReducer.data.storeId,
// })

// const mapDispatchToProps =dispatch=> {
// return{
//   getFilterGroups: (payload) => dispatch(getFilterGroups(payload)),
// }

// }

// export default connect(mapStateToProps, mapDispatchToProps)(SortFilterModal)




// import { FilterOutlined, SortAscendingOutlined } from '@ant-design/icons'
// import { Checkbox, Modal, Slider, Tabs } from 'antd'
// import PropTypes from 'prop-types'
// import React, { useEffect, useState } from 'react'
// import { connect } from 'react-redux'
// import { getFilterGroups } from '../actions'


// let temp = []
// const { TabPane } = Tabs;


// export const SortFilterModal = ({ dispatchFilterGroups }) => {

//   const [isModalVisible, setIsModalVisible] = useState(false);
//   const [filtersGroup, setFiltersGroup] = useState()
//   const [selectedFilterGroup, setSelectedFilterGroup] = useState()
//   const [filterValues, setFilterValues] = useState([])
//   const [filterArray, setFilterArray] = useState([])
//   const [filterPayLoad, setFilterPayLoad] = useState({})
//   const [priceRange, setPriceRange] = useState()
//   const [data, setData] = useState()
//   const [loading, setLoading] = useState(false)
//   const [priceFilter, setPriceFilter] = useState({ priceRange: {} })



//   useEffect(() => {
//     const payload = { storeId: 'az', setFiltersGroup }
//     dispatchFilterGroups({ payload })

//   }, [])

//   console.log('filtersGroup', filtersGroup)

//   const showModal = () => {
//     setIsModalVisible(true);
//   };

//   const handleOk = () => {
//     setIsModalVisible(false);
//   };

//   const handleCancel = () => {
//     setIsModalVisible(false);
//   };


//   const selectFilterGroup = (filter,dataPrice) => {
//     console.log('valuesfilete', filter,dataPrice)
   
//     setSelectedFilterGroup(filter)
//     setFilterValues()
//     setLoading(true)  
//     if (filter)

//       setTimeout(() => {
//         if(dataPrice){
//           setFilterValues(filter.priceRange)
//           setData(dataPrice)
//         }
//         else{
//           setData()
//           setFilterValues(filter.filter_group_values)
//         }
//         setLoading(false)
//       }, 500)

//   }

//   console.log('values groups selectedFilterrup', selectedFilterGroup)

//   const selectedFilterValue = (e, filter) => {

   
//     const groupid = selectedFilterGroup.filter_group_id
//     const value = filter.filter_value_id

//     if (e.target.checked) {
//       if (filterArray.length) {
//         const indexOfObject = filterArray.findIndex(object => {
//           return object[groupid] == value;
//         });
//         if (indexOfObject != -1) {
//           filterArray.splice(indexOfObject, 1);
//           setFilterArray(filterArray)
//         }
//         else {
//           const newFilterArray = [...filterArray, { [groupid]: value }]
//           setFilterArray(newFilterArray)
//         }
//       }
//       else {
//         const newFilterArray = [...filterArray, { [groupid]: value }]
//         setFilterArray(newFilterArray)
//       }
//     }

//   }

//   useEffect(() => {
//     const filterAfterGroupby = filtergroupBy(filterArray)
//     setFilterPayLoad({ filter_groups: filterAfterGroupby })

//   }, [filterArray])

//   const priceSliderhandler = (value) => {
//     setPriceFilter({ priceRange: { max_price: value[1], min_price: value[0] } })
//     console.log(value)
//   }



//   const filtergroupBy = (arr, key) => {
//     const result = arr.reduce((h, obj) => Object.assign(h, { [Object.keys(obj)]: (h[Object.keys(obj)] || []).concat(Number(Object.values(obj))) }), {})
//     return result
//   }


//   console.log('filter Array', filterArray, filterPayLoad)


//   const marks = {
//     0: '0',

//     100: {
//       style: {
//         color: 'blue',
//       },
//       label: <strong>100</strong>,
//     },
//   };


//   const handleFilterAndSort = () => {
//     const finalPayloadForSortAndFilter = { ...filterPayLoad, ...priceFilter }
// console.log('finalpayloadFor',finalPayloadForSortAndFilter)

//     // setFilterAndSortPayload(finalPayloadForSortAndFilter)
//     // setTriggerFilter("yes")
//     // setFilterModalVisible(false)
//   }

//   return (
//     <div>
//       <FilterOutlined onClick={showModal} />

//       <Modal title="Filters" header={false} footer={false} visible={isModalVisible} onOk={handleOk} onCancel={handleCancel} bodyStyle={{ padding: '0px' }}>
//         <div className='flex w-full '>
//           <div className=' flex flex-col overflow-y-scroll h-96  bg-gray-200 font-montRegular'>
//           <p className='py-5 px-4 text-[12px] font-montSemiBold cursor-pointer' onClick={() => { selectFilterGroup('sortBy','dummy')}}>Sort</p>
//             {filtersGroup && Object?.keys(filtersGroup).map(function (groupid) {
           
        

//               if (groupid != 'priceRange') {
//                 return (
//                   <p className='py-5 px-4 text-[12px] font-montSemiBold cursor-pointer' onClick={() => { selectFilterGroup(filtersGroup[groupid]) }}>{filtersGroup[groupid].filter_group_name}</p>
//                 )
//               }
//               else if (groupid == 'priceRange') {

//                 return (
//                   <p className='py-5 px-4 text-[12px] font-montSemiBold cursor-pointer' onClick={() => { selectFilterGroup(filtersGroup,'priceRange') }}>Price</p>
//                 )
//               }
              
//             })
//             }
//           </div>

//           {/* Filter Values */}

//           <div className='flex flex-col'>
//             <div className='w-96  h-96 overflow-y-scroll'>
//               {console.log('filterValues',data, filterValues)}
//               {!loading ?
//                 data!='priceRange' || data!='dummy'  ?
//                   filterValues && Object?.keys(filterValues).map(function (groupid) {
              
//                     if (selectedFilterGroup.filter_group_id != 'sort') {

//                       console.log('selectedFilterGroup',data,filterValues,selectedFilterGroup)
                     
//                       return (
//                         <div className='flex items-center  px-5 '>
//                           <input type="checkbox" value={'abc'} onChange={(e) => { selectedFilterValue(e, filterValues[groupid]) }} />
//                           {selectedFilterGroup.filter_group_name == 'Colours' || 'Colour' || 'Color' || 'Shades' ? <div className='h-3 w-3 ml-2 rounded-sm ' style={{ backgroundColor: filterValues[groupid].filter_value_name.toLowerCase() }}></div> : <p></p>}

//                           <p className=' px-7 mt-4' >{filterValues[groupid].filter_value_name}</p>
//                           {/* </input> */}
//                         </div>
//                       )
//                     }
//                   })
//                   :
//                   data=='priceRange'?
                 
//                   <div className='flex flex-col px-5 w-full '>
//                     { console.log('data',data)}
//                     {console.log('selected filter group',selectedFilterGroup)}
//                     <p className='mt-12 text-lg font-montRegular'>Price</p>
//                     <Slider className='lg:w-72 w-56' range defaultValue={[0,4000]} min={0} max={200000}
//                     // marks={{
//                     //   [Number(selectedFilterGroup.priceRange.min_value)]: `${Number(selectedFilterGroup.priceRange.min_value)}`,
//                     //   [Number(selectedFilterGroup.priceRange.max_value)]: `${Number(selectedFilterGroup.priceRange.max_value)}`,
//                     // }
//                     // } 
//                     onChange={priceSliderhandler} 
//                     />

//                   </div>:
//                   <p>sory by</p>


//                 : ''}


//             </div>

//             <div className='bottom-0 h-14 flex items-center lg:justify-end justify-center  px-4 '>
//               <button className='px-2'>Clear All</button>
//               <button className='bg-red-600 px-5 py-2 text-white rounded' onClick={handleFilterAndSort} >Apply</button>
//             </div>
//           </div>

//         </div>
//       </Modal >

//     </div >
//   )
// }


// const mapStateToProps = (state) => ({})

// const mapDispatchToProps = dispatch => {
//   return {
//     dispatchFilterGroups: (payload) => dispatch(getFilterGroups(payload)),
//   }
// }

// export default connect(mapStateToProps, mapDispatchToProps)(SortFilterModal)