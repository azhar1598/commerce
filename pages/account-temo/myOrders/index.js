import { ArrowLeftOutlined, RightOutlined } from '@ant-design/icons'
import React, { useEffect, useState } from 'react'
import { connect } from 'react-redux'
import { useRouter } from 'next/router'
import Link from 'next/link'
import { Spin } from 'antd'
import Profile from '../../../components/Profile'
import { getOrdersInfo } from '../../../services/apiServices'
import Head from 'next/head';
import NoOrders from '../../../components/svgComponents/NoOrders'
import PageWrapper from '../../../components/PageWrapper/PageWrapper'

export const Index = ({ customerDetails, storeDetails, storeSettings }) => {

    const [orders, setOrders] = useState([])
    const [loading, setLoading] = useState(true)
    const [orderItems, setOrderItems] = useState([])

    useEffect(() => {

        getOrders()
    }, [])

    const getOrders = async () => {
        const response = await getOrdersInfo(customerDetails?.data?.customer_id)
        setOrders(response.data)

        setLoading(false)
    }


    const router = useRouter()

    const handlePush = (item) => {
        router.push({
            pathname: `/account/orderDetails/${item.orderId}`,

        })



    }

    return (
        <div className=' lg:mt-24 md:-mt-4 bg-[#F6F6F6] flex lg:pl-32 md:pl-32 lg:p-8 md:p-8'>
            {/* <Head>
                <title>{storeDetails ? storeDetails?.store_name : 'Apparel Store'}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href={storeDetails ? storeDetails?.logo_img_url : 'favicon.ico'} />
            </Head> */}
            <Profile />
            <div className='flex flex-col w-full mt-20 lg:mt-0 lg:mr-24 md:mr-24'>
                <div className='bg-white pl-4 p-3 lg:pl-8 lg:p-3 md:pl-8 md:p-3 flex text-left lg:ml-5 md:ml-5 w-full border-b-4 border-slate-[200]'>
                    <div className='lg:hidden block'>
                        <Link href='/account/user'>
                            <ArrowLeftOutlined className='text-black text-lg mr-4 mt-4' />
                        </Link>
                    </div>
                    <p className='text-black font-montSemiBold mt-4'>My Orders</p>
                </div>
                <div className='flex flex-col items-center  justify-between lg:ml-5 md:ml-5 w-full  cursor-pointer mb-24' >

                    {!loading ?
                        <>
                            {orders.length != 0 ?
                                orders.map((item, index) =>
                                    <div className='w-full' key={index}>
                                        <div className='flex p-2 lg:items-center lg:pl-8 lg:p-3 md:items-center bg-white mt-2 md:pl-8 md:p-3 text-left w-full  ' onClick={() => { handlePush(item) }}>


                                            {Object.keys(item.orderItems).map((key, index) => {
                                                return (<>
                                                    {index == 0 ?

                                                        <div className={`${Object.keys(item.orderItems).length > 1 ? `blur-sm` : ``}`}>
                                                            <img src={item.orderItems[key].itemImg ? item.orderItems[key].itemImg : 'https://www.bastiaanmulder.nl/wp-content/uploads/2013/11/dummy-image-square.jpg'} className='w-28 h-28 lg:w-28 lg:min-w-28 lg:max-w-28' />

                                                        </div> : ''}

                                                </>
                                                )
                                            })}

                                            <p className={`${Object.keys(item.orderItems).length > 1 ? `text-black font-montSemiBold text-lg  absolute lg:mt-0 lg:ml-9  ml-10 mt-10` : `hidden`}`}>+ {Object.keys(item.orderItems).length - 1}</p>

                                            <div className='flex flex-col items-start w-full ml-4 lg:ml-24 md:ml-24'>
                                                <p className={`ml-6 ${item.orderStatus === "ORDER_DELIVERED_SUCCESS" ? `text-green-500` : item.orderStatus === "CANCELLED_BY_CUSTOMER" || item.orderStatus == 'ORDER_DECLINED_BY_RESTAURANT'  ? `text-red-500` : `text-black`} text-md font-montSemiBold`}>{item.orderStatus === "ORDER_DELIVERED_SUCCESS" ? "Delivered" : item.orderStatus == "ORDER_CONFIRMED_BY_REST" ? "Order Confirmed" : item.orderStatus == "PENDING_PICKUP_BY_CUST" ? "Out for delivery" : item.orderStatus == "CANCELLED_BY_CUSTOMER" || item.orderStatus == 'ORDER_DECLINED_BY_RESTAURANT'  ? "Order Cancelled" : "Order Placed"}</p>
                                                {Object.keys(item.orderItems).map((key, index) => {
                                                    return (<>
                                                        {index == 0 ?
                                                            <>
                                                                <p className='ml-6 w-56 break-words '>{item.orderItems[key].itemName}  {Object.keys(item.orderItems).length > 1 ? `+ ${Object.keys(item.orderItems).length - 1} More` : ''}</p>
                                                                <p className='text-[#212B3680] '></p>
                                                            </> : ''}
                                                    </>
                                                    )
                                                })}
                                            </div>
                                            <RightOutlined className='text-black text-lg  self-center' />

                                        </div>
                                    </div>
                                )

                                :
                                <>
                                    <div className='hidden lg:flex flex-col items-center mt-12 '>
                                        <NoOrders secondaryColor={storeSettings?.secondary_color} navbarColor={storeSettings?.primary_color} mobile={false} />
                                        <p className='text-lg font-montSemiBold'>No Orders</p>
                                    </div>
                                    <div className=' lg:hidden flex flex-col items-center mt-5 w-full'>
                                        <NoOrders secondaryColor={storeSettings?.secondary_color} navbarColor={storeSettings?.primary_color} mobile={true} />
                                        <p className='text-lg font-montSemiBold'>No Orders</p>
                                    </div>
                                </>
                            }
                        </>
                        :


                        <div className='h-96 flex items-center justify-center'>
                            <Spin />
                        </div>
                    }
                </div>

            </div>

        </div>
    )
}

const mapStateToProps = (state) => {
    return {
        customerDetails: state.customerDetailsReducer,
        storeDetails: state.storeDetailsReducer?.data,
        storeSettings: state.storeSettingsReducer?.data
    }
}

const mapDispatchToProps = {}

export default connect(mapStateToProps, mapDispatchToProps)(PageWrapper(Index))