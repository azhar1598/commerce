import React, { useEffect, useState } from 'react'
import { connect } from 'react-redux'
import { Step, Stepper } from 'react-form-stepper';
import { Checkbox, Radio, Space } from 'antd';
import { convenienceFlag } from '../../services/apiServices';
import Billing from '../../components/Billing';
import { useRouter } from 'next/router'
import { useMediaQuery } from 'react-responsive';
import ReviewTracker from '../../components/ReviewTracker';
import Coupon from '../../components/Coupon';
import { WalletFilled } from '@ant-design/icons';
import Head from 'next/head';
import PageWrapper from '../../components/PageWrapper/PageWrapper';
import { convenienceCharges } from '../../actions';


export const Index = ({ checkout, storeSettings, stateWallet, storeDetails,storeDisplaySettings,convenienceChargesAction }) => {


    const [paymentMethod, setPaymentMethod] = useState()
    const [useWallet, setUseWallet] = useState(false)
    const [paymentAdded, setPaymentAdded] = useState(false)

    const router = useRouter()
    const isTabletOrMobile = useMediaQuery({ query: '(max-width: 992px)' })

    const [validCoupon, setValidCoupon] = useState(false)

    const walletChange = (e) => {

        console.log('wallet review-mobile',useWallet)
        if(storeDisplaySettings?.data?.is_payment_accepted=="Y"){
        if (e.target.checked) {
            setPaymentMethod('ONL')
            setUseWallet(true)
        }
        else{
            setPaymentMethod(paymentMethod)
            setUseWallet(false)
        }
    }
    }

    
 




    useEffect(() => {
        if (!isTabletOrMobile) {
            router.push('/review')
        }

    }, [isTabletOrMobile])


    const handlePaymentChange = async (e) => {
        
        
        if (e.target.value == 'COD') {
            if (storeDisplaySettings?.data?.is_cod_accepted == 'Y') {
                setPaymentMethod(e.target.value)
                // const response = await convenienceFlag(checkout.backendCart?.purchase_id, e.target.value == 'COD' ? 'N' : 'Y')
                // if (response) {
                //     setPaymentAdded(true)
                // }


                convenienceChargesAction(checkout.backendCart?.purchase_id, e.target.value == 'COD' ? 'N' : 'Y',setPaymentAdded)


            }
            else {
                // setStoreClosed(true)
            }
        }
        else if (e.target.value == 'ONL') {
            if (storeDisplaySettings?.data?.is_payment_accepted == 'Y') {
                setPaymentMethod(e.target.value)
                // const response = await convenienceFlag(checkout.backendCart?.purchase_id, e.target.value == 'COD' ? 'N' : 'Y')
                // if (response) {
                //     setPaymentAdded(true)
                // }


                convenienceChargesAction(checkout.backendCart?.purchase_id, e.target.value == 'COD' ? 'N' : 'Y',setPaymentAdded)

            }
            else {
                // setStoreClosed(true)
            }
        }

            setUseWallet(false)
    }


    const handleWalletChange = async (e) => {

        if(storeDisplaySettings?.data?.is_payment_accepted=="Y"){
        stateWallet?.customer_wallet_balance != 0 ? walletChange(e) : ''
        // const response = await convenienceFlag(checkout.backendCart?.purchase_id, e.target.value == 'COD' ? 'N' : 'Y')
        // if (response) {
        //     setPaymentAdded(true)
        // }

        convenienceChargesAction(checkout.backendCart?.purchase_id, e.target.value == 'COD' ? 'N' : 'Y',setPaymentAdded)



    }else{
        // setStoreClosed(true)
    }

    }

    return (
        <>
            {/* <Head>
                <title>{storeDetails ? storeDetails?.store_name : 'Apparel Store'}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href={storeDetails ? storeDetails?.logo_img_url : 'favicon.ico'} />
            </Head> */}
            <ReviewTracker storeSettings={storeSettings} deliveryMethod={true} addPaymentMethod={false} reviewOrder={false} orderPlaced={false} />

            <div className=' w-full p-3'>
                {/* <Stepper activeStep={1}>
                <Step label="Add Payment method" />
                <Step label="Review Order" />
                <Step label="Order placed" />
            </Stepper> */}
                <div className=' lg:block bg-white mt-28 lg:mt-0 md:mt-0  border-2  mt-4' style={{border:`2px solid ${ storeSettings.data ? storeSettings.data.secondary_color : 'gray'}`}}>


                    <Coupon storeSettings={storeSettings} validCoupon={validCoupon} setValidCoupon={setValidCoupon} />
                </div>

                <p className='mt-10 font-montSemiBold text-lg w-full text-center text-[#212B36]'>Payment Method</p>
                <div className='bg-white h-32 mb-1 flex items-center  w-full'>
                    <Radio.Group onChange={handlePaymentChange} value={paymentMethod}>
                        <Space direction="vertical" className="leading-9">
                            <div className='p-4 mt-8 border-y border-slate-400 w-[95vw] '>
                                <Radio value='ONL' className='font-montSemiBold' style={{color:storeDisplaySettings?.data?.is_payment_accepted != 'Y'?'gray':'black'}}>Online Payment {
                                 
                                    storeDisplaySettings?.data?.is_payment_accepted != 'Y'?<span className='text-red-500 px-2 text-[14px]'>Unavailable</span>:''}</Radio>
                            </div>
                            <div className='p-4 border-b border-slate-400 w-[95vw] '>
                                <Radio value='COD' className='font-montSemiBold'style={{color:storeDisplaySettings?.data?.is_cod_accepted != 'Y'?'gray':'black'}}>Pay on Delivery {
                                 
                                 storeDisplaySettings?.data?.is_cod_accepted != 'Y'?<span className='text-red-500 px-2 text-[14px]'>Unavailable</span>:''}</Radio>
                            </div>
                        </Space>
                    </Radio.Group>
                </div>

                <div className='bg-white flex items-center justify-start px-8 pt-16 w-full'>

                    <div className='-mt-9 mr-3' >

                    <Checkbox onChange={(e) => {
                                    handleWalletChange(e)


                                }} defaultChecked={false} checked={useWallet} style={{color:storeDisplaySettings?.data?.is_payment_accepted != 'Y'?'gray':'black'}}><span className=' font-montSemiBold' ></span></Checkbox>
                    </div>
                    <div className='flex flex-col'>
                        <span className=' font-montSemiBold text-[12px]' >{stateWallet?.customer_wallet_balance != 0 ? paymentMethod == 'ONL' ? ' Use Wallet Money' : 'Wallet only available for Online Payment' : 'No Wallet Amount'}</span>
                        <p className=' font-montRegular flex items-center '>Available Balance <span className='text-green-500 ml-2'>{storeDetails?.currency_symbol} {stateWallet?.customer_wallet_balance}</span></p>
                    </div>

                </div>

                <Billing className='' billingDetails={checkout.purchaseDetails?.data} checkout={checkout.backendCart?.purchase_id} review={true} wallet={useWallet} walletAmount={stateWallet?.customer_wallet_balance}  paymentMethod={paymentMethod} final={false} />
            </div>
        </>
    )
}

const mapStateToProps = (state) => ({
    storeSettings: state.storeSettingsReducer,
    cart: state.cartReducer.cart,
    checkout: state.checkoutReducer,
    customerDetails: state.customerDetailsReducer,
    stateWallet: state.walletReducer?.data,
    storeDetails: state.storeDetailsReducer?.data,
    storeDisplaySettings:state.storeDisplaySettingsReducer
})



const mapDispatchToProps = dispatch => {
    return {
       
        convenienceChargesAction:(purchaseId,flag,setPaymentAdded)=>dispatch(convenienceCharges(purchaseId,flag,setPaymentAdded))
    }
}

export default connect(mapStateToProps, mapDispatchToProps)(PageWrapper(Index))